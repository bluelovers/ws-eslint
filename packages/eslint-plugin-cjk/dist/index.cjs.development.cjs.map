{"version":3,"file":"index.cjs.development.cjs","sources":["../src/rules/utils/ast-utils.ts","../src/rules/utils/helper.ts","../src/utils/re.ts","../src/rules/no-irregular-whitespace.ts","../src/rules/index.ts","../src/const.ts","../src/index.ts"],"sourcesContent":["/*\n * https://github.com/eslint/eslint/blob/main/lib/shared/ast-utils.js\n */\n\nexport const lineBreakPattern = /\\r\\n|[\\r\\n\\u2028\\u2029]/u;\n\n/**\n * Creates a version of the `lineBreakPattern` regex with the global flag.\n * Global regexes are mutable, so this needs to be a function instead of a constant.\n * @returns {RegExp} A global regular expression that matches line terminators\n */\nexport function createGlobalLinebreakMatcher()\n{\n\treturn new RegExp(lineBreakPattern.source, \"gu\");\n}\n","import { Rule } from 'eslint';\nimport { ESLINT_SWITCH } from '../../const';\n\ntype _IOptions = ESLINT_SWITCH | [ESLINT_SWITCH, ...any[]];\n\nexport function createRule<META extends Readonly<Record<string, any>>, RULE extends Rule.RuleModule, NAME extends string, EXTRA extends Record<string, any>>(meta: META & {\n\treadonly name: NAME,\n\treadonly configs?: {\n\t\t[name: string]: _IOptions,\n\t\trecommended: _IOptions,\n\n\t}\n} & EXTRA, rule: RULE)\n{\n\treturn {\n\t\t...meta,\n\t\trule,\n\t}\n}\n","/**\n * remove regexp in ignores\n * @private\n */\nexport function removeRegexClass(re: RegExp, ignoresRe: RegExp): RegExp\n{\n\tif (!ignoresRe)\n\t{\n\t\treturn re;\n\t}\n\n\tconst source = re.source.replace(ignoresRe, \"\");\n\n\treturn new RegExp(source, re.flags);\n}\n\nexport function handleIgnoreRe(ignores: string[]): RegExp\n{\n\tif (!ignores || !ignores?.length)\n\t{\n\t\treturn null;\n\t}\n\n\tconst source = ignores\n\t\t.map(c =>\n\t\t{\n\t\t\tif (c === \"\\f\" || c === \"\\\\f\" || c === \"\\\\\\\\f\")\n\t\t\t{\n\t\t\t\treturn \"\\\\\\\\f\";\n\t\t\t}\n\t\t\telse if (c === \"\\v\" || c === \"\\\\v\" || c === \"\\\\\\\\v\")\n\t\t\t{\n\t\t\t\treturn \"\\\\\\\\v\";\n\t\t\t}\n\t\t\telse if (c.startsWith(\"\\\\\\\\u\"))\n\t\t\t{\n\t\t\t\treturn c;\n\t\t\t}\n\t\t\telse if (c.length === 1)\n\t\t\t{\n\t\t\t\treturn `\\\\\\\\u${c.codePointAt(0).toString(16)}`;\n\t\t\t}\n\t\t\telse if (c.startsWith(\"\\\\\\\\\"))\n\t\t\t{\n\t\t\t\treturn c;\n\t\t\t}\n\n\t\t\tthrow new TypeError(`${c} \\\\u${c.codePointAt(0).toString(16)}`);\n\t\t})\n\t\t.join(\"|\")\n\t;\n\n\treturn new RegExp(source, \"ug\");\n}\n","/**\n *\n * @fileoverview Rule to disallow whitespace that is not a tab or space, whitespace inside strings and comments are allowed\n * @author Jonathan Kingston\n * @author Christophe Porteneuve\n *\n * @see https://github.com/eslint/eslint/blob/main/lib/rules/no-irregular-whitespace.js\n */\n\n\"use strict\";\n\n//------------------------------------------------------------------------------\n// Requirements\n//------------------------------------------------------------------------------\n\nimport { createGlobalLinebreakMatcher } from './utils/ast-utils';\nimport { createRule } from './utils/helper';\nimport { handleIgnoreRe, removeRegexClass } from '../utils/re';\nimport { ESLINT_META_TYPE, ESLINT_SWITCH } from '../const';\n\n//------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\n\n/**\n * @deprecated\n * @type {RegExp}\n */\nconst ALL_IRREGULARS = /[\\f\\v\\u0085\\ufeff\\u00a0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u202f\\u205f\\u3000\\u2028\\u2029]/u;\n/**\n * @deprecated\n * @type {RegExp}\n */\nconst IRREGULAR_WHITESPACE = /[\\f\\v\\u0085\\ufeff\\u00a0\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u202f\\u205f\\u3000]+/mgu;\nconst IRREGULAR_LINE_TERMINATORS = /[\\u2028\\u2029]/mgu;\nconst LINE_BREAK = createGlobalLinebreakMatcher();\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nconst ERROR_MESSAGE = \"Irregular whitespace not allowed.\";\n\nexport interface IOptions\n{\n\tskipComments?: boolean,\n\tskipStrings?: boolean,\n\tskipRegExps?: boolean,\n\tskipTemplates?: boolean,\n\tignores?: string[],\n}\n\nconst MESSAGE_ID = \"noIrregularWhitespace\" as const;\n\nexport const noIrregularWhitespace = createRule({\n\tname: \"no-irregular-whitespace-extra\",\n\n\tconfigs: {\n\t\trecommended: [\n\t\t\tESLINT_SWITCH.ERROR, <IOptions>{\n\t\t\t\t\"skipComments\": true,\n\t\t\t\t\"skipStrings\": false,\n\t\t\t\t\"skipTemplates\": false,\n\t\t\t\t\"skipRegExps\": false,\n\t\t\t\t\"ignores\": ['\\u3000'],\n\t\t\t},\n\t\t],\n\t},\n\n\tmessageId: MESSAGE_ID,\n\n}, {\n\n\tmeta: {\n\t\ttype: ESLINT_META_TYPE.PROBLEM,\n\n\t\tdocs: {\n\t\t\tdescription: \"disallow irregular whitespace\",\n\t\t\tcategory: \"Possible Errors\",\n\t\t\trecommended: true,\n\t\t\turl: \"https://eslint.org/docs/rules/no-irregular-whitespace\",\n\t\t},\n\n\t\tschema: [\n\t\t\t{\n\t\t\t\ttype: \"object\",\n\t\t\t\tproperties: {\n\t\t\t\t\tskipComments: {\n\t\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t},\n\t\t\t\t\tskipStrings: {\n\t\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\t\tdefault: true,\n\t\t\t\t\t},\n\t\t\t\t\tskipTemplates: {\n\t\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t},\n\t\t\t\t\tskipRegExps: {\n\t\t\t\t\t\ttype: \"boolean\",\n\t\t\t\t\t\tdefault: false,\n\t\t\t\t\t},\n\t\t\t\t\tignores: {\n\t\t\t\t\t\ttype: \"array\",\n\t\t\t\t\t\titems: {\n\t\t\t\t\t\t\ttype: \"string\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tadditionalProperties: false,\n\t\t\t},\n\t\t],\n\n\t\tmessages: {\n\t\t\t[MESSAGE_ID]: ERROR_MESSAGE,\n\t\t},\n\t},\n\n\tdefaultOptions: [\n\t\tESLINT_SWITCH.ERROR, <IOptions>{\n\t\t\t\"skipComments\": true,\n\t\t\t\"skipStrings\": false,\n\t\t\t\"skipTemplates\": false,\n\t\t\t\"skipRegExps\": false,\n\t\t\tignores: [],\n\t\t},\n\t],\n\n\tcreate(context)\n\t{\n\n\t\t// Module store of errors that we have found\n\t\tlet errors: any[] = [];\n\n\t\t// Lookup the `skipComments` option, which defaults to `false`.\n\t\tconst options = context.options[0] || {};\n\t\tconst skipComments = !!options.skipComments;\n\t\tconst skipStrings = options.skipStrings !== false;\n\t\tconst skipRegExps = !!options.skipRegExps;\n\t\tconst skipTemplates = !!options.skipTemplates;\n\n\t\tconst sourceCode = context.getSourceCode();\n\t\tconst commentNodes = sourceCode.getAllComments();\n\n\t\tconst ignoresRe: RegExp = handleIgnoreRe(options.ignores);\n\n\t\tconst ALL_IRREGULARS_LOCAL = removeRegexClass(ALL_IRREGULARS, ignoresRe);\n\t\tconst IRREGULAR_WHITESPACE_LOCAL = removeRegexClass(IRREGULAR_WHITESPACE, ignoresRe);\n\n\t\t/**\n\t\t * Removes errors that occur inside the given node\n\t\t * @param {ASTNode} node to check for matching errors.\n\t\t * @returns {void}\n\t\t * @private\n\t\t */\n\t\tfunction removeWhitespaceError(node: any)\n\t\t{\n\t\t\tconst locStart = node.loc.start;\n\t\t\tconst locEnd = node.loc.end;\n\n\t\t\terrors = errors.filter(({ loc: { start: errorLocStart } }) => (\n\t\t\t\terrorLocStart.line < locStart.line ||\n\t\t\t\terrorLocStart.line === locStart.line && errorLocStart.column < locStart.column ||\n\t\t\t\terrorLocStart.line === locEnd.line && errorLocStart.column >= locEnd.column ||\n\t\t\t\terrorLocStart.line > locEnd.line\n\t\t\t));\n\t\t}\n\n\t\t/**\n\t\t * Checks identifier or literal nodes for errors that we are choosing to ignore and calls the relevant methods to remove the errors\n\t\t * @param {ASTNode} node to check for matching errors.\n\t\t * @returns {void}\n\t\t * @private\n\t\t */\n\t\tfunction removeInvalidNodeErrorsInIdentifierOrLiteral(node: any)\n\t\t{\n\t\t\tconst shouldCheckStrings = skipStrings && (typeof node.value === \"string\");\n\t\t\tconst shouldCheckRegExps = skipRegExps && Boolean(node.regex);\n\n\t\t\tif (shouldCheckStrings || shouldCheckRegExps)\n\t\t\t{\n\n\t\t\t\t// If we have irregular characters remove them from the errors list\n\t\t\t\tif (ALL_IRREGULARS_LOCAL.test(node.raw))\n\t\t\t\t{\n\t\t\t\t\tremoveWhitespaceError(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Checks template string literal nodes for errors that we are choosing to ignore and calls the relevant methods to remove the errors\n\t\t * @param {ASTNode} node to check for matching errors.\n\t\t * @returns {void}\n\t\t * @private\n\t\t */\n\t\tfunction removeInvalidNodeErrorsInTemplateLiteral(node: any)\n\t\t{\n\t\t\tif (typeof node.value.raw === \"string\")\n\t\t\t{\n\t\t\t\tif (ALL_IRREGULARS_LOCAL.test(node.value.raw))\n\t\t\t\t{\n\t\t\t\t\tremoveWhitespaceError(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Checks comment nodes for errors that we are choosing to ignore and calls the relevant methods to remove the errors\n\t\t * @param {ASTNode} node to check for matching errors.\n\t\t * @returns {void}\n\t\t * @private\n\t\t */\n\t\tfunction removeInvalidNodeErrorsInComment(node: any)\n\t\t{\n\t\t\tif (ALL_IRREGULARS_LOCAL.test(node.value))\n\t\t\t{\n\t\t\t\tremoveWhitespaceError(node);\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Checks the program source for irregular whitespace\n\t\t * @param {ASTNode} node The program node\n\t\t * @returns {void}\n\t\t * @private\n\t\t */\n\t\tfunction checkForIrregularWhitespace(node: any)\n\t\t{\n\t\t\tconst sourceLines = sourceCode.lines;\n\n\t\t\tsourceLines.forEach((sourceLine, lineIndex) =>\n\t\t\t{\n\t\t\t\tconst lineNumber = lineIndex + 1;\n\t\t\t\tlet match;\n\n\t\t\t\twhile ((match = IRREGULAR_WHITESPACE_LOCAL.exec(sourceLine)) !== null)\n\t\t\t\t{\n\t\t\t\t\terrors.push({\n\t\t\t\t\t\tnode,\n\t\t\t\t\t\tmessageId: MESSAGE_ID,\n\t\t\t\t\t\tloc: {\n\t\t\t\t\t\t\tstart: {\n\t\t\t\t\t\t\t\tline: lineNumber,\n\t\t\t\t\t\t\t\tcolumn: match.index,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tend: {\n\t\t\t\t\t\t\t\tline: lineNumber,\n\t\t\t\t\t\t\t\tcolumn: match.index + match[0].length,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * Checks the program source for irregular line terminators\n\t\t * @param {ASTNode} node The program node\n\t\t * @returns {void}\n\t\t * @private\n\t\t */\n\t\tfunction checkForIrregularLineTerminators(node: any)\n\t\t{\n\t\t\tconst source = sourceCode.getText(),\n\t\t\t\tsourceLines = sourceCode.lines,\n\t\t\t\tlinebreaks = source.match(LINE_BREAK);\n\t\t\tlet lastLineIndex = -1,\n\t\t\t\tmatch;\n\n\t\t\twhile ((match = IRREGULAR_LINE_TERMINATORS.exec(source)) !== null)\n\t\t\t{\n\t\t\t\tconst lineIndex = linebreaks.indexOf(match[0], lastLineIndex + 1) || 0;\n\n\t\t\t\terrors.push({\n\t\t\t\t\tnode,\n\t\t\t\t\tmessageId: MESSAGE_ID,\n\t\t\t\t\tloc: {\n\t\t\t\t\t\tstart: {\n\t\t\t\t\t\t\tline: lineIndex + 1,\n\t\t\t\t\t\t\tcolumn: sourceLines[lineIndex].length,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tend: {\n\t\t\t\t\t\t\tline: lineIndex + 2,\n\t\t\t\t\t\t\tcolumn: 0,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t});\n\n\t\t\t\tlastLineIndex = lineIndex;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * A no-op function to act as placeholder for comment accumulation when the `skipComments` option is `false`.\n\t\t * @returns {void}\n\t\t * @private\n\t\t */\n\t\t// @formatter:off\n\t\t// eslint-disable-next-line @typescript-eslint/no-empty-function,no-empty-function\n\t\tfunction noop() {}\n\t\t// @formatter:on\n\n\t\tconst nodes: any = {};\n\n\t\tif (ALL_IRREGULARS_LOCAL.test(sourceCode.getText()))\n\t\t{\n\t\t\tnodes.Program = function (node: any)\n\t\t\t{\n\n\t\t\t\t/*\n\t\t\t\t * As we can easily fire warnings for all white space issues with\n\t\t\t\t * all the source its simpler to fire them here.\n\t\t\t\t * This means we can check all the application code without having\n\t\t\t\t * to worry about issues caused in the parser tokens.\n\t\t\t\t * When writing this code also evaluating per node was missing out\n\t\t\t\t * connecting tokens in some cases.\n\t\t\t\t * We can later filter the errors when they are found to be not an\n\t\t\t\t * issue in nodes we don't care about.\n\t\t\t\t */\n\t\t\t\tcheckForIrregularWhitespace(node);\n\t\t\t\tcheckForIrregularLineTerminators(node);\n\t\t\t};\n\n\t\t\tnodes.Identifier = removeInvalidNodeErrorsInIdentifierOrLiteral;\n\t\t\tnodes.Literal = removeInvalidNodeErrorsInIdentifierOrLiteral;\n\t\t\tnodes.TemplateElement = skipTemplates ? removeInvalidNodeErrorsInTemplateLiteral : noop;\n\t\t\tnodes[\"Program:exit\"] = function ()\n\t\t\t{\n\t\t\t\tif (skipComments)\n\t\t\t\t{\n\n\t\t\t\t\t// First strip errors occurring in comment nodes.\n\t\t\t\t\tcommentNodes.forEach(removeInvalidNodeErrorsInComment);\n\t\t\t\t}\n\n\t\t\t\t// If we have any errors remaining report on them\n\t\t\t\terrors.forEach(error => context.report(error));\n\t\t\t};\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnodes.Program = noop;\n\t\t}\n\n\t\treturn nodes;\n\t},\n});\n\nexport default noIrregularWhitespace\n","\nimport { default as noIrregularWhitespace } from './no-irregular-whitespace';\n\nexport const rules = {\n\t[noIrregularWhitespace.name]: noIrregularWhitespace.rule,\n};\n\nexport default rules;\n\n","export const PLUGIN_NAME = 'cjk' as const;\n\nexport const enum ESLINT_SWITCH\n{\n\tERROR = 'error',\n\tOFF = \"off\"\n}\n\nexport const enum ESLINT_META_TYPE\n{\n\tPROBLEM = 'problem'\n}\n","import { rules } from \"./rules\";\nimport { ESLINT_SWITCH, PLUGIN_NAME } from './const';\nimport noIrregularWhitespace from './rules/no-irregular-whitespace';\n\nexport { rules }\n\nexport const configs = {\n\trecommended: {\n\t\tplugins: [PLUGIN_NAME],\n\t\trules: {\n\t\t\t\"no-irregular-whitespace\": [\n\t\t\t\tESLINT_SWITCH.OFF,\n\t\t\t\t{\n\t\t\t\t\t\"skipComments\": true,\n\t\t\t\t\t\"skipStrings\": false,\n\t\t\t\t\t\"skipTemplates\": false,\n\t\t\t\t\t\"skipRegExps\": false,\n\t\t\t\t},\n\t\t\t],\n\t\t\t[`${PLUGIN_NAME}/no-irregular-whitespace-extra` as const]: noIrregularWhitespace.configs.recommended,\n\t\t},\n\t},\n};\n"],"names":["lineBreakPattern","createGlobalLinebreakMatcher","RegExp","source","createRule","meta","rule","removeRegexClass","re","ignoresRe","replace","flags","handleIgnoreRe","ignores","length","map","c","startsWith","codePointAt","toString","TypeError","join","ALL_IRREGULARS","IRREGULAR_WHITESPACE","IRREGULAR_LINE_TERMINATORS","LINE_BREAK","ERROR_MESSAGE","MESSAGE_ID","noIrregularWhitespace","name","configs","recommended","messageId","type","docs","description","category","url","schema","properties","skipComments","default","skipStrings","skipTemplates","skipRegExps","items","additionalProperties","messages","defaultOptions","create","context","errors","options","sourceCode","getSourceCode","commentNodes","getAllComments","ALL_IRREGULARS_LOCAL","IRREGULAR_WHITESPACE_LOCAL","removeWhitespaceError","node","locStart","loc","start","locEnd","end","filter","errorLocStart","line","column","removeInvalidNodeErrorsInIdentifierOrLiteral","shouldCheckStrings","value","shouldCheckRegExps","Boolean","regex","test","raw","removeInvalidNodeErrorsInTemplateLiteral","removeInvalidNodeErrorsInComment","checkForIrregularWhitespace","sourceLines","lines","forEach","sourceLine","lineIndex","lineNumber","match","exec","push","index","checkForIrregularLineTerminators","getText","linebreaks","lastLineIndex","indexOf","noop","nodes","Program","Identifier","Literal","TemplateElement","error","report","rules","PLUGIN_NAME","ESLINT_SWITCH","ESLINT_META_TYPE","plugins"],"mappings":"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"}